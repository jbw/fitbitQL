

const fitbitTypes = `

type Activity {
    id: Int!,
    name: String
}

type LifetimeTotal {
    distance: DateValue
    floors: DateValue
    steps: DateValue
}

type LifetimeBest {
    total: LifetimeTotal
}
type Lifetime {
    best: LifetimeBest

}

type Calorie
{
    dateTime: String,
    value: String
}

type Dataset {
    level: Int,
    mets: Int,
    time:String,
    value: Float
}

type ActivityHeart {
    heart: [Heart],
    intraday: ActivityIntraDay
}

type Heart {
    customHeartRateZones: [HeartRateZone]
    dateTime: String
    heartRateZones: [ActivityHeart]
    value: String
}

type HeartRateZone {
    caloriesOut: Float,
    max: Int,
    min: Int,
    minutes: Int,
    name: String
}

type ActivityIntraDay {
    datasetInterval: Int,
    datasetType: String
    dataset: [Dataset]
}

type ActivityCalorie{
    calories: [Calorie],
    intraday: ActivityIntraDay
}

type Fitbit {
    Steps: Step
}

type Step {
    count: Int
}

type Goal {
    activeMinutes: Int,
    caloriesOut: Int,
    distance: Float,
    floors: Int,
    steps: Int
}

type User {
    aboutMe: String,
    avatar: String,
    avatar15Int: String,
    avatar64Int: String,
    city: String,
    clockTimeDisplayFormat: String,
    country: String,
    dateOfBirth: String,
    displayName: String,
    distanceUnit: String,
    encodedId: String,
    foodsLocale: String,
    fullName: String,
    gender: String,
    glucoseUnit: String,
    height: String,
    heightUnit: String,
    locale: String,
    memberSince: String,
    offsetFromUTCMillis: String,
    startDayOfWeek: String,
    state: String,
    strideLengthRunning: String,
    strideLengthWalking: String,
    timezone: String,
    waterUnit: String,
    weight: String,
    weightUnit: String
}

type Distance {
    activity: String,
    distance: Float
}

type DateValue {
    date: String,
    value: Float
}

type Summary {
    steps: Int
    elevation: Float,
    fairlyActiveMinutes: Int,
    floors: Int,
    lightlyActiveMinutes: Int,
    marginalCalories: Int,
    sedentaryMinutes: Int,
    veryActiveMinutes: Int,

    activeScore: Int,
    activityCalories: Int,
    caloriesBMR: Int,
    caloriesOut: Int,
    distances: [Distance]
}

type Query {
    activities(activityType: String!): [Activity],
    summary(dateOrPeriod: String!): Summary
    calories(date: String!): ActivityCalorie
    heart: ActivityHeart
    steps: Step
    user: User
    lifetime: Lifetime
}
`;

export default fitbitTypes;


